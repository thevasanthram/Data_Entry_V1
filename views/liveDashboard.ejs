<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <form action="/" method="get" id="homeForm"></form>
    <script>
      (function tokenValidate() {
        console.log('tokenValidating');
        if (localStorage.getItem('token') == null) {
          console.log('invalid');
          document.getElementById('homeForm').submit();
        } else {
          console.log('valid');
        }
      })();
    </script>
  <link rel="stylesheet" href="tailwind.min.css">                                    
    <link rel="stylesheet" href="./liveDashboard.css" />
    <link rel="shortcut icon" href="./favicon.png" type="image/x-icon" />

    <link
      href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Live Dashboard</title>
  </head>
  <body>
    <div class="main">
      <div class="header">
        <div style="display: flex">
          <img
            src="./icons/navBarIcon.png"
            title="Switch Mode"
            id="navBarIcon"
            alt="Switch Mode"
            style="cursor: pointer; width: 8%; margin: 0.5% 3%"
          />
          <div class="heading">Defect Management System</div>
        </div>
        <form id="btn" action="/logout" method="get" class="logoutButton">
          <div class="admin" id="user-mode-name"><%= currentUser %></div>
          <button
            type="button"
            onclick="logout()"
            style="
              background: linear-gradient(to right, #0f0c29, #302b63, #24243e);
            "
            class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
          >
            LOGOUT
          </button>
        </form>
      </div>
      <!-- ! ........SIde Nav Bar Menu......... -->
      <div id="navBarDivision">
        <div
          id="UserProfileDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="user_Profile" class="category">User Profile</div>
        </div>
        <div
          id="DataEntryDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="dataEntry" class="category">Data Entry</div>
        </div>
        <div
          id="ReportGenerationDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="reportGeneration" class="category">Report Generation</div>
        </div>
        <div
          id="AdministrationDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="administration" class="category">Administration</div>
        </div>
        <div
          id="AdminLogDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="adminLog" class="category">Admin Logs</div>
        </div>
        <div
          id="DashboardDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
        >
          <div id="activityLog" class="category">Dashboard</div>
        </div>
        <div id="UpdateSectionDiv"
            onmouseover="onmouseoverBGColor(event)"
            onmouseout="onmouseoutBGColor(event)"
            onclick="handleFormSubmit(event)"
        >
            <div id="update" class="category">Update Section</div>
        </div>
        <div id="CreateSectionDiv"
            onmouseover="onmouseoverBGColor(event)"
            onmouseout="onmouseoutBGColor(event)"
            onclick="handleFormSubmit(event)"
        >
            <div id="create" class="category">Create Section</div>
        </div>
      </div>
      <!-- !...................................................... -->
      <div class="liveIcon">
        <img
          src="./icons/liveIcon.png"
          style="height: 40px; width: auto"
          alt="liveImage"
        />
      </div>
      <div class="mainBody">  
        <div class="leftSection">
          <div class="online">
            <h1 class="title">ONLINE MODE</h1>
            <table class="rwd-table">
              <tr>
                <th>DEFECTS NAME</th>
                <th>TOTAL COUNT</th>
              </tr>
              <tr>
                <td data-th="OVERALL">Total Vehicles</td>
                <td data-th="TOTAL" id="vehicleCountOnline">0</td>
              </tr>
              <tr>
                <td data-th="OVERALL">Total Defects</td>
                <td data-th="TOTAL COUNT" id="total_defect_count_online">0</td>
              </tr>
              <% for(let i=0; i<defectList.length; i++){ %>
                <tr>
                  <td data-th="DEFECTS NAME"><%= defectList[i].defect %></td>
                  <td data-th="TOTAL COUNT" id="<%= defectList[i].defect.replace(/ /g,'')%>_online">0</td>
                </tr>
              <% } %>
            </table>
          </div>
  
          <div class="offline">
            <h1 class="title">OFFLINE MODE</h1>
            <table class="rwd-table">
              <tr>
                <th>DEFECTS NAME</th>
                <th>TOTAL COUNT</th>
              </tr>
              <tr>
                <td data-th="OVERALL">Total Vehicles</td>
                <td data-th="TOTAL" id="vehicleCountOffline">0</td>
              </tr>
              <tr>
                <td data-th="OVERALL">Total Defects</td>
                <td data-th="TOTAL" id="total_defect_count_offline">0</td>
              </tr>
              <% for(let i=0; i<defectList.length; i++){ %>
                <tr>
                  <td data-th="DEFECTS NAME"><%= defectList[i].defect %></td>
                  <td data-th="TOTAL COUNT" id="<%= defectList[i].defect.replace(/ /g,'')%>_offline">0</td>
                </tr>
              <% } %>
            </table>
          </div>
        </div>
  
        <div class="rightSection">
          <div class="mainTable flex flex-col justify-start content-center">
            <div
              class="tableContainer flex flex-col align-center overflow-y-scroll"
            >
              <div class="relative m-4">
                <table
                  class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
                >
                  <thead
                    class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400 sticky top-0"
                    style="background-color: #374151; color: lightgray"
                  >
                    <tr>
                      <th scope="col" class="py-3 px-6">User ID</th>
                      <th scope="col" class="py-3 px-6">User Name</th>
                      <th scope="col" class="py-3 px-6">Body number</th>
                      <th scope="col" class="py-3 px-6">Defect count</th>
                      <th scope="col" class="py-3 px-6">Time</th>
                    </tr>
                  </thead>
                  <tbody
                    class="overflow-y-auto defectLogTableBody"
                    style="background-color: #1f2937"
                  >
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="notificationContainer"></div>
    <form action="/profile" method="post" id="userProfileForm">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/follower" id="followerForm" method="post">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/filter" method="post" id="filterFrom">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/admin" method="post" id="adminForm">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/adminLog" method="post" id="adminLogForm">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/updateSection" method="post" id="update_Section">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
    <form action="/createSection" method="post" id="createSectionForm">
      <input
        type="hidden"
        id="currentUser"
        name="currentUser"
        value="<%= currentUser %>"
      />
      <input
        type="hidden"
        id="currentEmpID"
        name="currentEmpID"
        value="<%= currentEmpID %>"
      />
      <input
        type="hidden"
        id="companyName"
        name="companyName"
        value="<%= companyName %>"
      />
      <input type="hidden" class="token" name="token" value="" />
    </form>
  </body>
  <script>
    console.log('token: ', localStorage.getItem('token'));

    const tokenElements = document.getElementsByClassName('token');

    Object.values(tokenElements).map((tokenElement) => {
      tokenElement.value = localStorage.getItem('token');
    });

    document.addEventListener('click', hideAndSeek);

    function hideAndSeek(event) {
      const navBarDivision = document.getElementById('navBarDivision');
      if (event.target.id != 'navBarIcon') {
        navBarDivision.style.display = 'none';
      } else {
        if (
          navBarDivision.style.display == 'none' ||
          navBarDivision.style.display == ''
        ) {
          navBarDivision.style.display = 'inline-block';
        } else if (navBarDivision.style.display == 'inline-block') {
          navBarDivision.style.display = 'none';
        }
      }
    }

    function onmouseoverBGColor(event) {
      event.target.style.backgroundColor = '#075154';
    }

    function onmouseoutBGColor(event) {
      if (event.target.id != 'activityLog') {
        event.target.style.backgroundColor = '#4ca1af';
      }
    }

    function handleFormSubmit(event) {
      var empStatus = '<%= emp_Status %>';
      var empChartAccess = '<%= emp_ChartAccess %>';

      if (event.target.id == 'dataEntry') {
        document.getElementById('followerForm').submit();
      } else if (event.target.id == 'update') {
          if (empStatus == 'admin') {
            document.getElementById('update_Section').submit();
          } else {
            document.getElementById(
              'adminAccessDeniedDivision'
            ).style.visibility = 'visible';
          }
        } else if (event.target.id == 'administration') {
        if (empStatus == 'admin') {
          document.getElementById('adminForm').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'reportGeneration') {
        if (empChartAccess.length > 0) {
          document.getElementById('filterFrom').submit();
        } else {
          document.getElementById(
            'reportGenerationDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'adminLog') {
        if (empStatus == 'admin') {
          document.getElementById('adminLogForm').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'user_Profile') {
        document.getElementById('userProfileForm').submit();
      } else if(event.target.id == 'create'){
        document.getElementById('createSectionForm').submit();
      }
    }

    // live
    setInterval(liveData, 500);

    async function liveData() {
      const defectList =  <%- JSON.stringify(defectList) %>
      const response = await fetch('/liveData', {
        method: 'POST',
        headers: {
          'Content-type': 'application/json',
        },
        body: JSON.stringify({
          defectList
        }),
      });

      const liveDataResponse = await response.json();

      console.log('liveDataResponse: ', liveDataResponse)

      // ONLINE

      const individualDefectCountOnline = document.getElementsByClassName(
        'individualDefectCountOnline'
      );

      document.getElementById('vehicleCountOnline').innerHTML = liveDataResponse.uniqueBodyNumberOnline.length
      document.getElementById('total_defect_count_online').innerHTML = liveDataResponse.defectCountOnline


      Object.keys(liveDataResponse.individualDefectCountOnline).map((singleDefect) => {
        // for online defect data
        document.getElementById(`${singleDefect.replace(/ /g,'')}_online`).innerHTML = liveDataResponse.individualDefectCountOnline[singleDefect]
        // for offline defect data
        document.getElementById(`${singleDefect.replace(/ /g,'')}_offline`).innerHTML = liveDataResponse.individualDefectCountOffline[singleDefect]
      })
      // document.getElementsByClassName('vehicleCountOnline')[0].animate(
      //     [
      //       // keyframes
      //       { transform: 'scale(1.5)' },
      //     ],
      //     {
      //       // timing options
      //       duration: 500,
      //       iterations: 1,
      //     }
      //   );

      // if (
      //   document.getElementsByClassName('defectCountOnline')[0].innerHTML !=
      //   liveDataResponse.defectCountOnline
      // ) {
      //   document.getElementsByClassName('defectCountOnline')[0].animate(
      //     [
      //       // keyframes
      //       { transform: 'scale(1.5)' },
      //     ],
      //     {
      //       // timing options
      //       duration: 500,
      //       iterations: 1,
      //     }
      //   );
      // }



      // Object.values(individualDefectCountOnline).map((singleDefect, index) => {
      //   if (
      //     individualDefectCountOnline[index].innerHTML !=
      //     Object.values(liveDataResponse.individualDefectCountOnline)[index]
      //   ) {
      //     individualDefectCountOnline[index].animate(
      //       [
      //         // keyframes
      //         { transform: 'scale(1.5)' },
      //       ],
      //       {
      //         // timing options
      //         duration: 500,
      //         iterations: 1,
      //       }
      //     );
      //   }
      //   individualDefectCountOnline[index].innerHTML = Object.values(
      //     liveDataResponse.individualDefectCountOnline
      //   )[index];
      // });

      // OFFLINE

      document.getElementById('vehicleCountOffline').innerHTML = liveDataResponse.uniqueBodyNumberOffline.length
      document.getElementById('total_defect_count_offline').innerHTML = liveDataResponse.defectCountOffline

      // Object.values(individualDefectCountOffline).map((singleDefect, index) => {
      //   if (
      //     individualDefectCountOffline[index].innerHTML !=
      //     Object.values(liveDataResponse.individualDefectCountOffline)[index]
      //   ) {
      //     individualDefectCountOffline[index].animate(
      //       [
      //         // keyframes
      //         { transform: 'scale(1.5)' },
      //       ],
      //       {
      //         // timing options
      //         duration: 500,
      //         iterations: 1,
      //       }
      //     );
      //   }
      //   individualDefectCountOffline[index].innerHTML = Object.values(
      //     liveDataResponse.individualDefectCountOffline
      //   )[index];
      // });

      // defectLog Table row generation
      const defectLogTableBody =
        document.getElementsByClassName('defectLogTableBody')[0];

      Object.values(defectLogTableBody.childNodes).map((childRow) => {
        defectLogTableBody.removeChild(childRow);
      });

      liveDataResponse.employeeDefectResponse.map((singleLog, index) => {
        const activityLogTableRow = document.createElement('tr');
        activityLogTableRow.className =
          'border-b dark:bg-gray-800 dark:border-gray-700';
        defectLogTableBody.appendChild(activityLogTableRow);
        Object.values(liveDataResponse.employeeDefectResponse[index]).map(
          (eachColumnValue, jIndex) => {
            const eachColumnValueCell = document.createElement('td');
            eachColumnValueCell.className =
              'py-4 text-white px-6 font-medium whitespace-nowrap dark:text-white';
            eachColumnValueCell.innerHTML = eachColumnValue;
            activityLogTableRow.appendChild(eachColumnValueCell);
          }
        );
      });
    }

    setInterval(liveNotification, 5000);

    async function liveNotification() {
      const response = await fetch('/liveNotification', {
        method: 'POST',
        headers: {
          'Content-type': 'application/json',
        },
        body: JSON.stringify({}),
      });

      const liveDataResponse = await response.json();

      const notificationContainer = document.getElementById(
        'notificationContainer'
      );

      while (notificationContainer.firstChild) {
        notificationContainer.removeChild(notificationContainer.lastChild);
      }

      liveDataResponse.liveNotificationData.map((notification) => {
        const notificationDiv = document.createElement('div');
        notificationDiv.className = 'notificationDiv';
        notificationContainer.appendChild(notificationDiv);

        const notificationContent = document.createElement('p');
        notificationContent.className = 'notificationContent';
        ('');
        notificationContent.innerHTML = `${notification['username']} saved ${notification['defectcount']} defects in ${notification['body_number']}`;
        notificationDiv.appendChild(notificationContent);
      });
    }

    function logout() {
      localStorage.removeItem('token');
      Object.values(tokenElements).map((tokenElement) => {
        tokenElement.value = '';
      });
      document.getElementsByClassName('logoutButton')[0].submit();
    }
  </script>
</html>
