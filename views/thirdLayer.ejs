<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <form action="/" method="get" id="homeForm"></form>
    <script>
      (function tokenValidate() {
        console.log('tokenValidating');
        if (localStorage.getItem('token') == null) {
          console.log('invalid');
          document.getElementById('homeForm').submit();
        } else {
          console.log('valid');
        }
      })();
    </script>
    <link rel="stylesheet" href="./thirdLayer.css" />
    <link rel="stylesheet" href="./thirdLayer_2.css" />
  <link rel="stylesheet" href="tailwind.min.css">                                    
    <link rel="shortcut icon" href="./favicon.png" type="image/x-icon" />
    <title>Data Entry System</title>
    <link
      href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- <script src="../resources/tailwind.config.js"></script> -->
  </head>
  <body>
    <div>
      <div class="header">
        <div style="display: flex; align-items: center">
          <img
            src="./icons/home.png"
            title="Home"
            id="home-icon"
            alt="Home"
            onclick="document.getElementById('followerForm').submit();"
          />
          <div class="heading">Data Entry System</div>
          <p class="selected-message">
            Body Number : <%= currentBodyNumber %> | Category : <%=
            selectedCategory %> | Sub-Category : <%= selectedSubCategory %>
          </p>
        </div>
        <form id="btn" action="/logout" method="get" class="logoutButton">
          <div class="admin" id="user-mode-name"><%= currentUser %></div>
          <button
            type="button"
            onclick="logout()"
            style="
              background: linear-gradient(to right, #0f0c29, #302b63, #24243e);
            "
            class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"
          >
            LOGOUT
          </button>
        </form>
      </div>
      <div id="title-name-content">
        <div class="sub_container">
          <img
            src="./icons/arrow.png"
            title="Back"
            id="go-back-icon"
            alt="Go Back"
            onclick="gotoSecondLayer()"
          />
          <p id="title-name">Select Defect :</p>
        </div>
        <!-- Toggle Switch for online / offline -->
        <div id="toggle" class="mt-6 ml-6">
          <div class="flex w-full mb-6">
            <label
              id="label_switch"
              for="toggle_switch"
              class="flex items-center cursor-pointer"
              style="justify-content: center"
            >
              <div class="relative">
                <input
                  type="checkbox"
                  id="toggle_switch"
                  class="sr-only mode"
                  onclick="dynamicText()"
                />
                <div class="block bg-gray-600 w-14 h-8 rounded-full"></div>
                <div
                  class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"
                ></div>
              </div>
              <div
                class="ml-2 text-gray-300 font-medium text-2xl"
                id="mode_status"
              >
                Online
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="main-content">
        <form
          id="defectLayerForm"
          action="/receive-thirdLayer-temp"
          method="post"
        >
          <div class="defect-title-name">
            <p>Defect :</p>
          </div>
          <div class="defect-category-content">
            <%if(Object.keys(defectObject).length !=0) {%>
              <% const defectListId = Object.keys(defectObject); %>
              <% for (let i=0; i < defectListId.length; i++){%>
              <button
                type="button"
                class="defect-category"
                style="background-color: black; color: white"
                id="<%= defectListId[i].replace(/ /g,'_') %>-main-defect-button"
                onclick="defectCategorySwitch(`<%= defectListId[i].replace(/ /g,'_') %>`)"
              >
                <%= defectListId[i] %>
              </button>
              <%}%>
            <% } %>
          </div>
          <div class="sub-defect-title-name">
            <p>Sub-Defect :</p>
          </div>
          <div class="sub-content">
            <% if (Object.keys(defectObject).length != 0) {%>
              <% const defectListId = Object.keys(defectObject); let
              subDefectListId = []; %>
              <%for ( let i=0; i < defectListId.length; i++){ 
                subDefectListId = Object.keys(defectObject[defectListId[i]]); %>
              <div
                id="<%= defectListId[i].replace(/ /g,'_') %>"
                class="defectName"
                style="display: none"
              >
                <div class="sub-defects-category-content">
                  <%for (let j = 0; j < subDefectListId.length; j++){%>
                  <button
                    type="button"
                    class="sub-defect-category <%= defectListId[i].replace(/ /g,'_') %>-buttons"
                    style="background-color: black; color: white"
                    onclick="subdefectCategorySwitch(event , `<%= defectListId[i].replace(/ /g,'_') %>-<%= subDefectListId[j].replace(/ /g,'_') %>`)"
                  >
                    <%= subDefectListId[j] %>
                  </button>
                  <%}%>
                </div>
                <div class="save_reset_container">
                  <div class="zones-title-name">Zones :</div>
                  <div class="save-reset-content">
                    <button
                      type="button"
                      class="save-button"
                      onclick="validate()"
                      style="background-color: black; color: white"
                    >
                      Save
                    </button>
                    <button
                      type="button"
                      class="reset-button"
                      onclick="handleReset()"
                      style="background-color: black; color: white"
                    >
                      Reset
                    </button>
                  </div>
                </div>
                <div class="Zone_Container">
                  <div id="zone-division<%= i+1 %>">
                    <%for(let k = 0; k < subDefectListId.length; k++){%>
                    <div
                      id="<%= defectListId[i].replace(/ /g,'_') %>-<%= subDefectListId[k].replace(/ /g,'_') %>"
                      class="<%= defectListId[i] %>"
                      style="display: none"
                    >
                      <% for (let l = 0; l < zoneList.length;l++){%>
                      <div
                        class="<%= categoryId %>_<%= subcategoryId %>_<%= zoneList[l].zone %> input_container"
                        id="<%= categoryId %>_<%= subcategoryId %>_<%= defectListId[i].replace(/ /g,'_') %>_<%= subDefectListId[k].replace(/ /g,'_') %>_<%= zoneList[l].zone %>"
                      >
                        <input
                          type="number"
                          inputmode="numeric"
                          class="<%= categoryId %>_<%= subcategoryId %>_<%= defectListId[i].replace(/ /g,'_') %>_<%= subDefectListId[k].replace(/ /g,'_') %>_<%= zoneList[l].zone %> defectInputTag"
                          name="<%= defectListId[i].replace(/ /g,'_') %>__<%= subDefectListId[k].replace(/ /g,'_') %>__<%= zoneList[l].zone %>"
                          min="1"
                        />
                        <div class="zone-number">
                          <%= zoneList[l].zone %>
                        </div>
                      </div>
                      <%}%>
                    </div>
                    <%}%>
                  </div>
                </div>
              </div>
              <%}%>
            <% } %>
          </div>
        </form>
      </div>
      <div>
        <form action="/follower" id="followerForm" method="post">
          <input
            type="hidden"
            id="currentUser"
            name="currentUser"
            value="<%= currentUser %>"
          />
          <input
            type="hidden"
            id="currentEmpID"
            name="currentEmpID"
            value="<%= currentEmpID %>"
          />
          <input
            type="hidden"
            id="companyName"
            name="companyName"
            value="<%= companyName %>"
          />
          <input type="hidden" class="token" name="token" value="" />
        </form>
        <form action="/firstlayer" method="post" id="firstLayerform">
          <input
            type="hidden"
            id="currentUser"
            name="currentUser"
            value="<%= currentUser %>"
          />
          <input
            type="hidden"
            id="currentEmpID"
            name="currentEmpID"
            value="<%= currentEmpID %>"
          />
          <input
            type="hidden"
            id="companyName"
            name="companyName"
            value="<%= companyName %>"
          />
          <input
            type="hidden"
            id="currentBodyNumber"
            name="currentBodyNumber"
            value="<%= currentBodyNumber %>"
          />
          <input
            type="hidden"
            id="defectBodyNumberStatus"
            name="defectBodyNumberStatus"
            value="<%= defectBodyNumberStatus %>"
          />
          <input type="hidden" name="mode" id="firstLayerMode" value="">
          <input type="hidden" class="token" name="token" value="" />
        </form>
        <form action="/secondlayer" method="post" id="secondLayerForm">
          <input
            type="hidden"
            id="currentUser"
            name="currentUser"
            value="<%= currentUser %>"
          />
          <input
            type="hidden"
            id="currentEmpID"
            name="currentEmpID"
            value="<%= currentEmpID %>"
          />
          <input
            type="hidden"
            id="companyName"
            name="companyName"
            value="<%= companyName %>"
          />
          <input
            type="hidden"
            id="currentBodyNumber"
            name="currentBodyNumber"
            value="<%= currentBodyNumber %>"
          />
          <input
            type="hidden"
            id="defectBodyNumberStatus"
            name="defectBodyNumberStatus"
            value="<%= defectBodyNumberStatus %>"
          />
          <input
            type="hidden"
            id="selectedCategory"
            name="selectedCategory"
            value="<%= selectedCategory %>"
          />
          <input type="hidden" name="mode" id="modeVariable" value="" />
          <input type="hidden" class="token" name="token" value="" />
        </form>
      </div>
    </div>

    <script>
      console.log('token: ', localStorage.getItem('token'));

      const tokenElements = document.getElementsByClassName('token');

      Object.values(tokenElements).map((tokenElement) => {
        tokenElement.value = localStorage.getItem('token');
      });

      modeDOM = document.getElementsByClassName('mode')[0];
      var mode = '<%= mode %>';
      if (mode == 'online') {
        modeDOM.checked = true;
        document.getElementById('mode_status').innerHTML = 'Online';
      } else {
        modeDOM.checked = false;
        document.getElementById('mode_status').innerHTML = 'Offline';
      }
      function dynamicText() {
        if (!modeDOM.checked) {
          modeDOM.checked = false;
          document.getElementById('mode_status').innerHTML = 'Offline';
          mode = 'offline';
        } else {
          modeDOM.checked = true;
          document.getElementById('mode_status').innerHTML = 'Online';
          mode = 'online';
        }
      }

      async function transmit(selectedSubCategory) {
        var mode = 'online';
        if (!modeDOM.checked) {
          mode = 'offline';
        }
        const secondLayerForm = document.getElementById('secondLayerForm');
        document.getElementById('selectedSubCategory').value =
          selectedSubCategory;
        document.getElementById('mode').value = mode;
        secondLayerForm.submit();
      }

      const categoryId = "<%= categoryId %>"
      const subcategoryId = "<%= subcategoryId %>"
      const defectObj = <%- JSON.stringify(defectObject) %>
      const zoneList = <%- JSON.stringify(zoneList) %>
      const mainDefectId = Object.keys(defectObj);

      // styling zones
      Object.keys(defectObj).map( (defect) => {
        Object.keys(defectObj[defect]).map( (sub_defect) => {
          zoneList.map( (zone) => {
            const zoneContainer = document.getElementById(`${categoryId}_${subcategoryId}_${defect.replace(/ /g,'_')}_${sub_defect.replace(/ /g,'_')}_${zone.zone}`)
            zoneContainer.style.top = `${zone.top_position}%`
            zoneContainer.style.bottom = `${zone.bottom_position}%`
            zoneContainer.style.right = `${zone.right_position}%`
            zoneContainer.style.left = `${zone.left_position}%`
            zoneContainer.style.width = `${zone.width}%`
            zoneContainer.style.paddingTop = `${zone.top_padding}%`
            zoneContainer.style.paddingBottom = `${zone.bottom_padding}%`
            zoneContainer.style.paddingRight = `${zone.right_padding}%`
            zoneContainer.style.paddingLeft = `${zone.left_padding}%`
            zoneContainer.addEventListener('mouseover' ,() => {
              zoneContainer.style.backgroundColor = 'rgba(135, 207, 235, 0.563)'
            })
            zoneContainer.addEventListener('mouseout' ,() => {
              zoneContainer.style.backgroundColor = 'transparent'
            })
          })
        })
      })

      // first defect button format (autoselect and auto display)
      document
        .getElementById(mainDefectId[0].replace(/ /g,'_'))
        .removeAttribute('style');
      document.getElementById(
        mainDefectId[0].replace(/ /g,'_')+'-main-defect-button'
      ).style.background = '#ffffff';
      document.getElementById(
        mainDefectId[0].replace(/ /g,'_')+'-main-defect-button'
      ).style.color = '#000000';

      // first sub-defect button format (autoselect and auto display)
      if( Object.keys(defectObj).length > 0){
        for (let i = 0; i < mainDefectId.length; i++) {
          document
            .getElementById(
              mainDefectId[i].replace(/ /g,'_') +
                '-' +
                Object.keys(defectObj[mainDefectId[i]])[0].replace(/ /g,'_')
            )
            .removeAttribute('style');
          document.getElementsByClassName(
            mainDefectId[i].replace(/ /g,'_') + '-buttons'
          )[0].style.background = '#ffffff';
          document.getElementsByClassName(
            mainDefectId[i].replace(/ /g,'_') + '-buttons'
          )[0].style.color = '#000000';
        }
      }

      console.log(
        `url(./uploads/<%= categoryId %>_<%= subcategoryId %>.jpg)`
      );

      // code to set corresponding background image for zone-divisions
      for (let i = 1; i <= mainDefectId.length; i++) {
        // console.log(`<%= categoryId %>_<%= subcategoryId %>`);
        document.getElementById('zone-division' + i).style.backgroundImage =
          'url(./uploads/<%= categoryId %>_<%= subcategoryId %>.jpg)';
      }

      function defectCategorySwitch(clickedDefect) {
        var i;
        var defectCategory = document.getElementsByClassName('defectName');
        console.log(clickedDefect)

        //code block to displaying the selected defect division only
        for (i = 0; i < defectCategory.length; i++) {
          defectCategory[i].style.display = 'none';
        }
        document.getElementById(clickedDefect).style.display = 'block';

        //code block to highlight the selected defect button only
        var y = document.getElementsByClassName(event.target.className);
        for (i = 0; i < y.length; i++) {
          y[i].style.background = '#000000';
          y[i].style.color = '#ffffff';
        }
        event.target.style.background = '#ffffff';
        event.target.style.color = '#000000';
      }

      function subdefectCategorySwitch(event, clickedSubDefect) {
        var i;
        var subDefectCategory = document.getElementsByClassName(
          event.target.parentElement.parentElement.id
        );

        // code block to displaying the selected sub-defect division only
        for (i = 0; i < subDefectCategory.length; i++) {
          subDefectCategory[i].style.display = 'none';
        }
        document.getElementById(clickedSubDefect).style.display = 'block';

        //code block to highlight the selected sub-defect button only
        var y = document.getElementsByClassName(
          event.target.parentElement.parentElement.id + '-buttons'
        );
        for (i = 0; i < y.length; i++) {
          y[i].style.background = '#000000';
          y[i].style.color = '#ffffff';
        }
        event.target.style.background = '#ffffff';
        event.target.style.color = '#000000';
      }

      function validate() {
        var defectLayerFormInputElements =
          document.getElementsByClassName('defectInputTag');

        console.log(
          'defectLayerFormInputElements: ',
          defectLayerFormInputElements
        );
        var checkBoxNotSelectedCount = 0;
        Object.values(defectLayerFormInputElements).map((singleInput) => {
          if (!singleInput.value) {
            checkBoxNotSelectedCount++;
          }
        });
        console.log('checkBoxNotSelectedCount: ', checkBoxNotSelectedCount);
        console.log(
          'defectLayerFormInputElements.length: ',
          defectLayerFormInputElements.length
        );
        if (checkBoxNotSelectedCount == defectLayerFormInputElements.length) {
          alert('No Zones were selected as defect. Atleast select a zone');
        } else {
          handleSave();
        }
      }

      async function handleSave() {
        var defectLayerFormData = {};
        var defectLayerFormInputElements =
          document.getElementsByClassName('defectInputTag');

        Object.values(defectLayerFormInputElements).map((singleInput) => {
          if (singleInput.value) {
            defectLayerFormData[singleInput.name] = singleInput.value;
          }
        });

        console.log('defectLayerFormData: ', defectLayerFormData);

        //disabling onclick function of the save button, :- save button can be clicked only once.
        const saveButton = document.getElementsByClassName('save-button')[0];

        const zoneCheckerResponse = await fetch('/zonechecker', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json',
          },
          body: JSON.stringify({
            defectObj: defectLayerFormData,
            mode,
            currentUser: '<%= currentUser %>',
            currentEmpID: '<%= currentEmpID %>',
            companyName: '<%= companyName %>',
            currentBodyNumber: '<%= currentBodyNumber %>',
            defectBodyNumberStatus: '<%= defectBodyNumberStatus %>',
            selectedCategory: '<%= selectedCategory %>',
            selectedSubCategory: '<%= selectedSubCategory %>',
          }),
        });

        const zoneCheckerResponseObject = await zoneCheckerResponse.json();

        console.log('zoneCheckerResponseObject: ', zoneCheckerResponseObject);

        let message = 'Defect Report.Are you sure want to make changes\n\n';

        // making up zone report for prompt box
        for (let i in zoneCheckerResponseObject.data) {
          message = message + i + ': \n';
          for (let j in zoneCheckerResponseObject.data[i]) {
            message = message + ' ' + j.replace('_', '') + ': ';
            for (let k in zoneCheckerResponseObject.data[i][j]) {
              message += k + '->';
              for (let l in zoneCheckerResponseObject.data[i][j][k]) {
                message +=
                  l + `(${zoneCheckerResponseObject.data[i][j][k][l]})`;
                if (
                  Object.keys(zoneCheckerResponseObject.data[i][j][k]).length >
                  1
                ) {
                  message += ',';
                }
              }
              if (
                Object.keys(zoneCheckerResponseObject.data[i][j]).length > 1 &&
                Object.keys(zoneCheckerResponseObject.data[i][j][k]).length == 1
              ) {
                message += ',';
              }
            }
            message += '\n';
          }
          message += '\n';
        }
        console.log('message: ', message);

        if (confirm(message) == true) {
          const mainResponse = await fetch('/receive-thirdLayer-temp', {
            method: 'POST',
            headers: {
              'Content-type': 'application/json',
            },
            body: JSON.stringify({
              defectObj: defectLayerFormData,
              mode,
              currentUser: '<%= currentUser %>',
              currentEmpID: '<%= currentEmpID %>',
              companyName: '<%= companyName %>',
              currentBodyNumber: '<%= currentBodyNumber %>',
              defectBodyNumberStatus: '<%= defectBodyNumberStatus %>',
              selectedCategory: '<%= selectedCategory %>',
              selectedSubCategory: '<%= selectedSubCategory %>',
            }),
          });

          const mainResponseObject = await mainResponse.json();

          console.log('mainResponseObject: ', mainResponseObject);

          let finalMessage = 'Defects Saved. Click OK to add more defects to the same body number';

          console.log('finalMessage: ', finalMessage);

          if (confirm(finalMessage) == false) {
            document.getElementById('followerForm').submit();
          } else {
            modeDOMElement = document.getElementsByClassName('mode')[0];
            var modeValue = 'online'
            if(!modeDOMElement.checked){
              modeValue = 'offline'
            }
            document.getElementById('firstLayerMode').value = modeValue
            document.getElementById('firstLayerform').submit();
          }
        } else {
          event.preventDefault();
          return false;
        }
      }

      function handleReset() {
        document.getElementById('defectLayerForm').reset();
      }

      function gotoSecondLayer(){
        modeDOM = document.getElementsByClassName('mode')[0];
        var mode = 'online'
        if(!modeDOM.checked){
          mode = 'offline'
        }
        document.getElementById('modeVariable').value = mode
        document.getElementById('secondLayerForm').submit();
      }

      function logout() {
        localStorage.removeItem('token');
        Object.values(tokenElements).map((tokenElement) => {
          tokenElement.value = '';
        });
        document.getElementsByClassName('logoutButton')[0].submit();
      }
    </script>
  </body>
</html>
